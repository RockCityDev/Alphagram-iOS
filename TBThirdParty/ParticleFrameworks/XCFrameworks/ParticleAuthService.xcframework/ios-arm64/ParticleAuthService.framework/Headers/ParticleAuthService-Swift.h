// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef PARTICLEAUTHSERVICE_SWIFT_H
#define PARTICLEAUTHSERVICE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ParticleAuthService",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, EVMSignTypedDataVersion, open) {
  EVMSignTypedDataVersionV1 = 0,
  EVMSignTypedDataVersionV3 = 1,
  EVMSignTypedDataVersionV4 = 2,
};

typedef SWIFT_ENUM(NSInteger, LoginType, open) {
  LoginTypeEmail = 0,
  LoginTypePhone = 1,
  LoginTypeGoogle = 2,
  LoginTypeFacebook = 3,
  LoginTypeApple = 4,
  LoginTypeDiscord = 5,
  LoginTypeGithub = 6,
  LoginTypeTwitch = 7,
  LoginTypeMicrosoft = 8,
  LoginTypeLinkedin = 9,
  LoginTypeJwt = 10,
};

typedef SWIFT_ENUM(NSInteger, ParticleAuthModalStyle, open) {
  ParticleAuthModalStyleFormSheet = 0,
  ParticleAuthModalStyleFullScreen = 1,
};

@class NSString;
@class SupportAuthType;
@class UserInfo;
@class NSURL;
@class ChainInfo;

SWIFT_CLASS("_TtC19ParticleAuthService19ParticleAuthService")
@interface ParticleAuthService : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Login
/// \param type Login type, support email, phone, google, apple and more.
///
/// \param account When login type is email, phone or jwt, you could pass email address, phone number or jwt.
///
/// \param supportAuthType Controls whether third-party login buttons are displayed. default will show all third-party login buttons.
///
/// \param loginFormMode Controls whether show light UI in web, default is false.
///
/// \param successHandler Success handler, user info.
///
/// \param failureHandler Failure handler.
///
+ (void)loginWithType:(enum LoginType)type account:(NSString * _Nullable)account supportAuthType:(NSArray<SupportAuthType *> * _Nonnull)supportAuthType loginFormMode:(BOOL)loginFormMode successHandler:(void (^ _Nonnull)(UserInfo * _Nullable))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Logout
/// \param successHandler Success handler.
///
/// \param failureHandler Failure handler.
///
+ (void)logoutWithSuccessHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Is user log in
///
/// returns:
/// If user is login return true, otherwise retrun false
+ (BOOL)isLogin SWIFT_WARN_UNUSED_RESULT;
/// Sign message
/// \param message Message that you want the user to sign
///
/// \param successHandler Success handler, signed message.
///
/// \param failureHandler Failure handler.
///
+ (void)signMessage:(NSString * _Nonnull)message successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Sign transaction, not support evm.
/// \param transaction Transaction that you want the user to sign.
///
/// \param successHandler Success handler, signed message.
///
/// \param failureHandler Failure handler.
///
+ (void)signTransaction:(NSString * _Nonnull)transaction successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Sign transaction, not support evm.
/// \param transactions All transactions that you want the user to sign.
///
/// \param successHandler Success handler, signed message.
///
/// \param failureHandler Failure handler.
///
+ (void)signAllTransactions:(NSArray<NSString *> * _Nonnull)transactions successHandler:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Sign and send transaction
/// \param message Transaction that you want the user to sign and send.
///
/// \param successHandler Success handler, signature message.
///
/// \param failureHandler Failure handler.
///
+ (void)signAndSendTransaction:(NSString * _Nonnull)message successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Sign typed data, not support solana.
/// \param message Message that you want the user to sign.
///
/// \param version Sign typed data version.
///
/// \param successHandler Success handler, signed message.
///
/// \param failureHandler Failure handler.
///
+ (void)signTypedData:(NSString * _Nonnull)message version:(enum EVMSignTypedDataVersion)version successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Get user address
///
/// returns:
/// Address
+ (NSString * _Nonnull)getAddress SWIFT_WARN_UNUSED_RESULT;
/// Get user info
///
/// returns:
/// User info
+ (UserInfo * _Nullable)getUserInfo SWIFT_WARN_UNUSED_RESULT;
/// Handle url, should call in your UIApplicationDelegate application(_:open:options:).
/// \param Url a valid url
///
///
/// returns:
/// If it is a valid url, will return true, otherwise return false
+ (BOOL)handleUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
+ (void)setChainInfo:(ChainInfo * _Nonnull)chainInfo successHandler:(void (^ _Nonnull)(UserInfo * _Nullable))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Set safari page modal present style, support full screen and form sheet, default is form sheet.
/// \param modalStyle Modal style
///
+ (void)setModalPresentStyle:(enum ParticleAuthModalStyle)modalStyle;
+ (void)setInterfaceStyle:(UIUserInterfaceStyle)style;
+ (void)setDisplayWallet:(BOOL)displayWallet;
+ (void)openWebWallet;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




typedef SWIFT_ENUM(NSInteger, ParticleWebType, open) {
  ParticleWebTypeSafari = 0,
  ParticleWebTypeWebView = 1,
};


SWIFT_CLASS("_TtC19ParticleAuthService15SupportAuthType")
@interface SupportAuthType : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull all;)
+ (SupportAuthType * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull google;)
+ (SupportAuthType * _Nonnull)google SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull facebook;)
+ (SupportAuthType * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull apple;)
+ (SupportAuthType * _Nonnull)apple SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull discord;)
+ (SupportAuthType * _Nonnull)discord SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull github;)
+ (SupportAuthType * _Nonnull)github SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull twitch;)
+ (SupportAuthType * _Nonnull)twitch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull microsoft;)
+ (SupportAuthType * _Nonnull)microsoft SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SupportAuthType * _Nonnull linkedin;)
+ (SupportAuthType * _Nonnull)linkedin SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19ParticleAuthService25ThirdPartyUserInfoWarpper")
@interface ThirdPartyUserInfoWarpper : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable email;
@property (nonatomic, readonly, copy) NSString * _Nullable picture;
- (nonnull instancetype)initWithId:(NSString * _Nullable)id name:(NSString * _Nullable)name email:(NSString * _Nullable)email picture:(NSString * _Nullable)picture OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19ParticleAuthService17ThirdPartyWarpper")
@interface ThirdPartyWarpper : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable provider;
@property (nonatomic, readonly, strong) ThirdPartyUserInfoWarpper * _Nullable userInfo;
- (nonnull instancetype)initWithProvider:(NSString * _Nullable)provider userInfo:(ThirdPartyUserInfoWarpper * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class WalletInfo;

SWIFT_CLASS("_TtC19ParticleAuthService8UserInfo")
@interface UserInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
@property (nonatomic, readonly, copy) NSArray<WalletInfo *> * _Nonnull wallets;
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nullable avatar;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSString * _Nullable updateAt;
@property (nonatomic, readonly, copy) NSString * _Nullable email;
@property (nonatomic, readonly, copy) NSString * _Nullable appleEmail;
@property (nonatomic, readonly, copy) NSString * _Nullable appleId;
@property (nonatomic, readonly, copy) NSString * _Nullable facebookEmail;
@property (nonatomic, readonly, copy) NSString * _Nullable facebookId;
@property (nonatomic, readonly, copy) NSString * _Nullable googleEmail;
@property (nonatomic, readonly, copy) NSString * _Nullable googleId;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
@property (nonatomic, readonly, copy) NSString * _Nullable discordId;
@property (nonatomic, readonly, copy) NSString * _Nullable discordEmail;
@property (nonatomic, readonly, copy) NSString * _Nullable githubId;
@property (nonatomic, readonly, copy) NSString * _Nullable githubEmail;
@property (nonatomic, readonly, copy) NSString * _Nullable twitchId;
@property (nonatomic, readonly, copy) NSString * _Nullable twitchEmail;
@property (nonatomic, readonly, copy) NSString * _Nullable microsoftId;
@property (nonatomic, readonly, copy) NSString * _Nullable microsoftEmail;
@property (nonatomic, readonly, copy) NSString * _Nullable linkedinId;
@property (nonatomic, readonly, copy) NSString * _Nullable linkedinEmail;
@property (nonatomic, readonly, strong) ThirdPartyWarpper * _Nullable thirdParty;
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token uuid:(NSString * _Nonnull)uuid wallets:(NSArray<WalletInfo *> * _Nonnull)wallets id:(NSInteger)id avatar:(NSString * _Nullable)avatar createdAt:(NSString * _Nullable)createdAt updateAt:(NSString * _Nullable)updateAt email:(NSString * _Nullable)email appleEmail:(NSString * _Nullable)appleEmail appleId:(NSString * _Nullable)appleId facebookEmail:(NSString * _Nullable)facebookEmail facebookId:(NSString * _Nullable)facebookId googleEmail:(NSString * _Nullable)googleEmail googleId:(NSString * _Nullable)googleId name:(NSString * _Nullable)name phone:(NSString * _Nullable)phone discordId:(NSString * _Nullable)discordId discordEmail:(NSString * _Nullable)discordEmail githubId:(NSString * _Nullable)githubId githubEmail:(NSString * _Nullable)githubEmail twitchId:(NSString * _Nullable)twitchId twitchEmail:(NSString * _Nullable)twitchEmail microsoftId:(NSString * _Nullable)microsoftId microsoftEmail:(NSString * _Nullable)microsoftEmail linkedinId:(NSString * _Nullable)linkedinId linkedinEmail:(NSString * _Nullable)linkedinEmail thirdParty:(ThirdPartyWarpper * _Nullable)thirdParty OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19ParticleAuthService10WalletInfo")
@interface WalletInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
@property (nonatomic, readonly, copy) NSString * _Nonnull chainName;
@property (nonatomic, readonly, copy) NSString * _Nonnull publicAddress;
- (nonnull instancetype)initWithUuid:(NSString * _Nonnull)uuid chainName:(NSString * _Nonnull)chainName publicAddress:(NSString * _Nonnull)publicAddress OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
