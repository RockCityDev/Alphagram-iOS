#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef PARTICLEWALLETAPI_SWIFT_H
#define PARTICLEWALLETAPI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import ParticleNetworkBase;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ParticleWalletAPI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Contact parameters struct, use for abi call
SWIFT_CLASS("_TtC17ParticleWalletAPI14ContractParams")
@interface ContractParams : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Config erc20 transfer contract parameters
/// \param contractAddress Contract address
///
/// \param to The receiver address
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
///
/// returns:
/// Config struct
+ (ContractParams * _Nonnull)erc20TransferWithContractAddress:(NSString * _Nonnull)contractAddress to:(NSString * _Nonnull)to amount:(NSString * _Nonnull)amount SWIFT_WARN_UNUSED_RESULT;
/// Config erc20 approve contract parameters
/// \param contractAddress Contract address
///
/// \param spender The spender address
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
///
/// returns:
/// Config struct
+ (ContractParams * _Nonnull)erc20ApproveWithContractAddress:(NSString * _Nonnull)contractAddress spender:(NSString * _Nonnull)spender amount:(NSString * _Nonnull)amount SWIFT_WARN_UNUSED_RESULT;
/// Config erc20 transferFrom contract parameters
/// \param contractAddress Contract address
///
/// \param from The sender address
///
/// \param to The receiver address
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
///
/// returns:
/// Config struct
+ (ContractParams * _Nonnull)erc20TransferFromContractAddress:(NSString * _Nonnull)contractAddress from:(NSString * _Nonnull)from to:(NSString * _Nonnull)to amount:(NSString * _Nonnull)amount SWIFT_WARN_UNUSED_RESULT;
/// Config erc721 safeTransferFrom contract parameters
/// \param contractAddress Contract address
///
/// \param from The sender address
///
/// \param to The receiver address
///
/// \param tokenId Token id
///
///
/// returns:
/// Config struct
+ (ContractParams * _Nonnull)erc721SafeTransferFromContractAddress:(NSString * _Nonnull)contractAddress from:(NSString * _Nonnull)from to:(NSString * _Nonnull)to tokenId:(NSString * _Nonnull)tokenId SWIFT_WARN_UNUSED_RESULT;
/// Config erc155 safeTransferFrom contract parameters
/// \param contractAddress Contract address
///
/// \param from The sender address
///
/// \param to The receiver address
///
/// \param id Token id
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param data Data
///
///
/// returns:
/// Config struct
+ (ContractParams * _Nonnull)erc1155SafeTransferFromContractAddress:(NSString * _Nonnull)contractAddress from:(NSString * _Nonnull)from to:(NSString * _Nonnull)to id:(NSString * _Nonnull)id amount:(NSString * _Nonnull)amount data:(NSString * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end

@class TokenInfo;
@class TokenPrice;
@class TokenResult;
@class TokenModel;

SWIFT_CLASS("_TtC17ParticleWalletAPI12GeneralChain")
@interface GeneralChain : NSObject
- (void)getTokenListWithSuccessHandler:(void (^ _Nonnull)(NSArray<TokenInfo *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getPriceBy:(NSArray<NSString *> * _Nonnull)addresses currencies:(NSArray<NSString *> * _Nonnull)currencies successHandler:(void (^ _Nonnull)(NSArray<TokenPrice *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getTokensAndNFTsBy:(NSString * _Nonnull)address tokenAddresses:(NSArray<NSString *> * _Nonnull)tokenAddresses successHandler:(void (^ _Nonnull)(TokenResult * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getTokensByTokenAddressesWithAddress:(NSString * _Nonnull)address tokenAddresses:(NSArray<NSString *> * _Nonnull)tokenAddresses successHandler:(void (^ _Nonnull)(NSArray<TokenModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getTokensAndNFTsFromDBBy:(NSString * _Nonnull)address successHandler:(void (^ _Nonnull)(TokenResult * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Add custom tokens
/// \param address User’s public address.
///
/// \param tokenAddresses Token contract address in evm, or token mint address in solana.
///
/// \param successHandler Success handler, will return existing token.
///
/// \param failureHandler Failure handler.
///
- (void)addCustomTokensWithAddress:(NSString * _Nonnull)address tokenAddresses:(NSArray<NSString *> * _Nonnull)tokenAddresses successHandler:(void (^ _Nonnull)(NSArray<TokenModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class EVMSuggestFeeModel;
@class EVMTransactionModel;
enum EVMTransactionType : NSInteger;
enum GasFeeLevel : NSInteger;

SWIFT_CLASS("_TtC17ParticleWalletAPI8EVMChain")
@interface EVMChain : GeneralChain
/// Get suggest gas fee
/// \param successHandler SuccessHandler description
///
/// \param failureHandler FailureHandler description
///
- (void)suggestedGasFeesWithSuccessHandler:(void (^ _Nonnull)(EVMSuggestFeeModel * _Nullable))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Get transactions from database
/// \param address Public address
///
/// \param successHandler SuccessHandler description
///
/// \param failureHandler FailureHandler description
///
- (void)getTransactionsFromDBBy:(NSString * _Nonnull)address successHandler:(void (^ _Nonnull)(NSArray<EVMTransactionModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Get transactions from API Service
/// \param address Public address
///
/// \param successHandler SuccessHandler description
///
/// \param failureHandler FailureHandler description
///
- (void)getTransactionsBy:(NSString * _Nonnull)address successHandler:(void (^ _Nonnull)(NSArray<EVMTransactionModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Estimate gas
/// \param from From address
///
/// \param to To address
///
/// \param value Value expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param data Data
///
/// \param successHandler Success handler, gas limit in hex format.
///
/// \param failureHandler Failure handler
///
- (void)estimateGasFrom:(NSString * _Nonnull)from to:(NSString * _Nonnull)to value:(NSString * _Nonnull)value data:(NSString * _Nonnull)data successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Encode function call
/// \param type Transaction type
///
/// \param sender Sender address
///
/// \param receiver Receiver address
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param contractAddress Contract address
///
/// \param tokenId Token id
///
/// \param data Data
///
/// \param successHandler Success handler
///
/// \param failureHandler Failure handler
///
- (void)particleEncodeFunctionCallWithType:(enum EVMTransactionType)type sender:(NSString * _Nonnull)sender receiver:(NSString * _Nonnull)receiver amount:(NSString * _Nonnull)amount contractAddress:(NSString * _Nonnull)contractAddress tokenId:(NSString * _Nullable)tokenId data:(NSString * _Nullable)data successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Call erc20 transfer
/// \param contractAddress Contract address
///
/// \param to To address
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param successHandler Success handler, data in hex format.
///
/// \param failureHandler Failure handler
///
- (void)erc20TransferWithContractAddress:(NSString * _Nonnull)contractAddress to:(NSString * _Nonnull)to amount:(NSString * _Nonnull)amount successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Call erc20 approve
/// \param contractAddress Contract address
///
/// \param spender Spender address
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param successHandler Success handler, data in hex format.
///
/// \param failureHandler Failure handler
///
- (void)erc20ApproveWithContractAddress:(NSString * _Nonnull)contractAddress spender:(NSString * _Nonnull)spender amount:(NSString * _Nonnull)amount successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Call erc20 transferFrom
/// \param contractAddress Contract address
///
/// \param from From address
///
/// \param to To address
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param successHandler Success handler, data in hex format.
///
/// \param failureHandler Failure handler
///
- (void)erc20TransferFromContractAddress:(NSString * _Nonnull)contractAddress from:(NSString * _Nonnull)from to:(NSString * _Nonnull)to amount:(NSString * _Nonnull)amount successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Call erc721 transferFrom
/// \param contractAddress Contract address
///
/// \param from From address
///
/// \param to To address
///
/// \param tokenId Token id
///
/// \param successHandler Success handler, data in hex format.
///
/// \param failureHandler Failure handler
///
- (void)erc721SafeTransferFromContractAddress:(NSString * _Nonnull)contractAddress from:(NSString * _Nonnull)from to:(NSString * _Nonnull)to tokenId:(NSString * _Nonnull)tokenId successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Call erc1155 safeTransferFrom
/// \param contractAddress Contract address
///
/// \param from From address
///
/// \param to To Address
///
/// \param id Token id
///
/// \param amount Amount expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param data Data
///
/// \param successHandler Success handler,  data in hex format.
///
/// \param failureHandler Failure handler
///
- (void)erc1155SafeTransferFromContractAddress:(NSString * _Nonnull)contractAddress from:(NSString * _Nonnull)from to:(NSString * _Nonnull)to id:(NSString * _Nonnull)id amount:(NSString * _Nonnull)amount data:(NSString * _Nonnull)data successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Create a transaciton
/// \param from From address
///
/// \param to If you send a erc20, erc721, erc1155 or interact with a contract, this is the contract address, if you send native, this is receiver address.
///
/// \param contractParams Contract parameters
///
/// \param value Native value, default is nil, expressed as a hex string.
/// for example:
/// 100000000000000 is “0x5AF3107A4000”
/// 3000 is “0xBB8”
///
/// \param type TxData type, 0x2 is EIP1155, 0x1 is EIP2930, 0x0 is legacy.
///
/// \param gasFeeLevel Gas fee level
///
/// \param action Normal is send, or cancel, speedUp.
///
/// \param successHandler Success Handler a transacion presented in hex string.
///
/// \param failureHandler Failure Handler
///
- (void)createTransactionFrom:(NSString * _Nonnull)from to:(NSString * _Nullable)to value:(NSString * _Nullable)value contractParams:(ContractParams * _Nullable)contractParams type:(NSString * _Nonnull)type gasFeeLevel:(enum GasFeeLevel)gasFeeLevel action:(enum Action)action successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Create a transaciton
/// \param from From address
///
/// \param to If you send a erc20, erc721, erc1155 or interact with a contract, this is the contract address, if you send native, this is receiver address.
///
/// \param value Native value, default is nil, expressed as a hex string.
///
/// \param data Data
///
/// \param type TxData type, 0x2 is EIP1155, 0x1 is EIP2930, 0x0 is legacy.
///
/// \param gasFeeLevel Gas fee level
///
/// \param action Normal is send, or cancel, speedUp.
///
/// \param successHandler Success Handler a transacion presented in hex string.
///
/// \param failureHandler Failure Handler
///
- (void)createTransactionFrom:(NSString * _Nonnull)from to:(NSString * _Nullable)to value:(NSString * _Nullable)value data:(NSString * _Nonnull)data type:(NSString * _Nonnull)type gasFeeLevel:(enum GasFeeLevel)gasFeeLevel action:(enum Action)action successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC17ParticleWalletAPI18EVMSuggestFeeModel")
@interface EVMSuggestFeeModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17ParticleWalletAPI19EVMTransactionModel")
@interface EVMTransactionModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, EVMTransactionType, closed) {
  EVMTransactionTypeTransferErc20 = 0,
  EVMTransactionTypeTransferErc721 = 1,
  EVMTransactionTypeTransferErc1155 = 2,
  EVMTransactionTypeApproveErc20 = 3,
  EVMTransactionTypeTransferFromErc20 = 4,
};

typedef SWIFT_ENUM(NSInteger, GasFeeLevel, closed) {
  GasFeeLevelLow = 0,
  GasFeeLevelMedium = 1,
  GasFeeLevelHigh = 2,
};



SWIFT_CLASS("_TtC17ParticleWalletAPI8NFTModel")
@interface NFTModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class SolanaChain;

SWIFT_CLASS("_TtC17ParticleWalletAPI17ParticleWalletAPI")
@interface ParticleWalletAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Get solana service
///
/// returns:
/// Solana service
+ (SolanaChain * _Nonnull)getSolanaService SWIFT_WARN_UNUSED_RESULT;
/// Get evm service
///
/// returns:
/// EVM service
+ (EVMChain * _Nonnull)getEvmService SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC17ParticleWalletAPI10PriceModel")
@interface PriceModel : NSObject
+ (PriceModel * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMarketCap:(double)marketCap price:(double)price lastUpdateAt:(NSInteger)lastUpdateAt vol24H:(double)vol24H change24H:(double)change24H symbol:(NSString * _Nonnull)symbol OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17ParticleWalletAPI11SolanaChain")
@interface SolanaChain : GeneralChain
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








@class SolanaTransactionModel;
enum SolanaTransactionType : NSInteger;

@interface SolanaChain (SWIFT_EXTENSION(ParticleWalletAPI))
/// Get Transactions
/// \param address Public address
///
/// \param beforeSignature Before signature
///
/// \param untilSignature Until signature
///
/// \param limit Limit
///
/// \param successHandler Success Handler, solana Transaction Models
///
/// \param failureHandler Failure handler
///
- (void)getTransactionsBy:(NSString * _Nonnull)address beforeSignature:(NSString * _Nullable)beforeSignature untilSignature:(NSString * _Nullable)untilSignature limit:(NSInteger)limit successHandler:(void (^ _Nonnull)(NSArray<SolanaTransactionModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Get transactions from database
/// \param address Public address
///
/// \param beforeSignature Before signature
///
/// \param untilSignature Until signature
///
/// \param limit Limit
///
/// \param successHandler Success handler, solana Transaction Models
///
/// \param failureHandler Failure handler
///
- (void)getTransactionsFromDBBy:(NSString * _Nonnull)address beforeSignature:(NSString * _Nullable)beforeSignature untilSignature:(NSString * _Nullable)untilSignature limit:(NSInteger)limit successHandler:(void (^ _Nonnull)(NSArray<SolanaTransactionModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Get token transactions
/// \param address Public address
///
/// \param mintAddress Token mint address
///
/// \param beforeSignature Before signature
///
/// \param untilSignature Until signature
///
/// \param limit Limit
///
/// \param successHandler Success handler, solana Transaction Models
///
/// \param failureHandler Failure handler
///
- (void)getTokenTransactionsBy:(NSString * _Nonnull)address mintAddress:(NSString * _Nonnull)mintAddress beforeSignature:(NSString * _Nullable)beforeSignature untilSignature:(NSString * _Nullable)untilSignature limit:(NSInteger)limit successHandler:(void (^ _Nonnull)(NSArray<SolanaTransactionModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Get token transactions from database
/// \param address Public address
///
/// \param mintAddress Token mint address
///
/// \param beforeSignature Before signature
///
/// \param untilSignature Until signature
///
/// \param limit Limit
///
/// \param successHandler Success handler, solana Transaction Models
///
/// \param failureHandler Failure handler
///
- (void)getTokenTransactionsFromDBWithAddress:(NSString * _Nonnull)address mintAddress:(NSString * _Nonnull)mintAddress beforeSignature:(NSString * _Nullable)beforeSignature untilSignature:(NSString * _Nullable)untilSignature limit:(NSInteger)limit successHandler:(void (^ _Nonnull)(NSArray<SolanaTransactionModel *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// Serialize transaciton
/// \param type Transactionn type
///
/// \param sender Sender
///
/// \param receiver Receiver
///
/// \param lamports Lamports expressed as a string.
/// for example:
/// 1000000000000 , pass “1000000000000”.
/// 3000, pass “3000”.
///
/// \param mintAddress Mint address
///
/// \param payer Fee payer
///
/// \param successHandler Success handler, serialized string.
///
/// \param failureHandler Failure handler
///
- (void)serializeTransactionWithType:(enum SolanaTransactionType)type sender:(NSString * _Nonnull)sender receiver:(NSString * _Nonnull)receiver lamports:(NSString * _Nonnull)lamports mintAddress:(NSString * _Nullable)mintAddress payer:(NSString * _Nullable)payer successHandler:(void (^ _Nonnull)(NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
@end



SWIFT_CLASS("_TtC17ParticleWalletAPI22SolanaTransactionModel")
@interface SolanaTransactionModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, SolanaTransactionType, closed) {
  SolanaTransactionTypeTransferSol = 0,
  SolanaTransactionTypeTransferToken = 1,
  SolanaTransactionTypeUnknown = 2,
  SolanaTransactionTypeUnwrapSol = 3,
};


SWIFT_CLASS("_TtC17ParticleWalletAPI9TokenInfo")
@interface TokenInfo : NSObject
- (nonnull instancetype)initWithChainName:(NSString * _Nonnull)chainName chainId:(NSInteger)chainId mintAddress:(NSString * _Nonnull)mintAddress symbol:(NSString * _Nonnull)symbol name:(NSString * _Nonnull)name decimals:(uint8_t)decimals logoURI:(NSString * _Nonnull)logoURI OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC17ParticleWalletAPI10TokenModel")
@interface TokenModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC17ParticleWalletAPI10TokenPrice")
@interface TokenPrice : NSObject
- (nonnull instancetype)initWithAddress:(NSString * _Nonnull)address currencies:(NSArray<PriceModel *> * _Nonnull)currencies OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17ParticleWalletAPI11TokenResult")
@interface TokenResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
